name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - '**.cs'
      - '**.csproj'
      - '**.sln'

permissions:
    contents: write

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'chore: atualiza tag version do .csproj')"
    runs-on: windows-latest
    env:
      CONFIGURATION: Release
      RUNTIME: win-x64

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restaurar dependências
        run: dotnet restore

      - name: Determinar versão do projeto
        id: version
        run: |
          $now = Get-Date
          $version = "1.0.{0:yy}.{0:MMdd}" -f $now
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Atualizar versão no .csproj
        run: |
          $csproj = Get-ChildItem -Path . -Filter *.csproj | Select-Object -First 1
          $versao = "${{ steps.version.outputs.version }}"
          $content = Get-Content $csproj.FullName -Raw

          if ($content -match '<Version>.*?</Version>') {
              $content = $content -replace '<Version>.*?</Version>', "<Version>$versao</Version>"
          } else {
              $content = $content -replace '</PropertyGroup>', "	<Version>$versao</Version>`n</PropertyGroup>"
          }

          $content | Set-Content $csproj.FullName

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git pull origin main --rebase
          git add $csproj.FullName
          git commit -m "chore: atualiza tag version do .csproj para v${{ steps.version.outputs.version }}"
          git push

      - name: Publicar aplicação
        run: >
          dotnet publish -c $env:CONFIGURATION -r $env:RUNTIME
          --self-contained true /p:PublishSingleFile=true
          -o publish

      - name: Instalar Inno Setup
        run: |
          Write-Host "Baixando InnoSetup por choco..."
          choco install innosetup -y

      - name: Gerar script de instalação
        run: |
          $appName = "MinhaAplicacao"
          $appVersion = "${{ steps.version.outputs.version }}"
          $issContent = @"
            [Setup]
            AppName=$appName
            AppVersion=$appVersion
            DefaultDirName={commonpf}\$appName
            OutputBaseFilename=${appName}_Setup_$appVersion
            OutputDir=installer
            Compression=lzma
            SolidCompression=yes
            
            [Files]
            Source: "publish\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
            
            [Icons]
            Name: "{commondesktop}\$appName"; Filename: "{app}\$appName.exe"
            
            [Run]
            Filename: "{app}\$appName.exe"; Description: "Iniciar $appName"; Flags: nowait postinstall
          "@
          Set-Content -Path "installer_script.iss" -Value $issContent

      - name: Compilar instalador com Inno Setup
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer_script.iss

      - name: Criar tag Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Versão ${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Criar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          files: installer/*.exe

      - name: Atualizar version.json no repositório
        run: |
          $projectName = "ASFA"
          $version = "${{ steps.version.outputs.version }}"
          $json = @{
            version = $version
            url = "https://github.com/${{ github.repository }}/releases/download/v$version/${projectName}_Setup_$version.exe"
            directUrl = "https://github.com/${{ github.repository }}/releases/download/v$version/${projectName}_Setup_$version.exe"
            changelog = "Versão $version disponibilizada em $(Get-Date -Format 'dd/MM/yyyy')"
          } | ConvertTo-Json -Depth 2
          $json | Out-File -Encoding utf8 version.json

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git pull origin main --rebase
          git add version.json
          git commit -m "chore: atualiza version.json para v$version"
          git push